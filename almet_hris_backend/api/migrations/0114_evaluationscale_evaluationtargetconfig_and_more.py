# Generated by Django 5.2.1 on 2025-10-23 13:18

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0113_remove_jobtitle_job_function'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EvaluationScale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., E++, E+, E, E-, E--', max_length=10, unique=True)),
                ('value', models.IntegerField(help_text='Numeric value for calculations')),
                ('range_min', models.IntegerField(help_text='Minimum percentage')),
                ('range_max', models.IntegerField(help_text='Maximum percentage')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'performance_evaluation_scales',
                'ordering': ['-range_min'],
            },
        ),
        migrations.CreateModel(
            name='EvaluationTargetConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objective_score_target', models.IntegerField(default=21)),
                ('competency_score_target', models.IntegerField(default=25)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'performance_evaluation_targets',
            },
        ),
        migrations.CreateModel(
            name='GoalLimitConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_goals', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_goals', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'performance_goal_limits',
            },
        ),
        migrations.CreateModel(
            name='ObjectiveStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'performance_objective_statuses',
            },
        ),
        migrations.CreateModel(
            name='PerformanceNotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_type', models.CharField(choices=[('GOAL_SETTING_START', 'Goal Setting Period Started'), ('MID_YEAR_START', 'Mid-Year Review Started'), ('MID_YEAR_END', 'Mid-Year Review Ending'), ('END_YEAR_START', 'End-Year Review Started'), ('END_YEAR_END', 'End-Year Review Ending'), ('FINAL_SCORE_PUBLISHED', 'Final Score Published')], max_length=30, unique=True)),
                ('subject', models.CharField(max_length=200)),
                ('message_template', models.TextField(help_text='Use {{employee_name}}, {{year}}, {{deadline}} as placeholders')),
                ('days_before', models.IntegerField(default=0, help_text='Days before deadline to send notification')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'performance_notification_templates',
            },
        ),
        migrations.CreateModel(
            name='DepartmentObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('weight', models.IntegerField(help_text='Weight percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.department')),
            ],
            options={
                'db_table': 'performance_department_objectives',
                'ordering': ['department', 'title'],
            },
        ),
        migrations.CreateModel(
            name='EmployeePerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('approval_status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_EMPLOYEE_APPROVAL', 'Pending Employee Approval'), ('PENDING_MANAGER_APPROVAL', 'Pending Manager Approval'), ('NEED_CLARIFICATION', 'Need Clarification'), ('APPROVED', 'Approved'), ('COMPLETED', 'Completed')], default='DRAFT', max_length=30)),
                ('objectives_set_date', models.DateTimeField(blank=True, null=True)),
                ('objectives_employee_submitted', models.BooleanField(default=False)),
                ('objectives_employee_approved', models.BooleanField(default=False)),
                ('objectives_manager_approved', models.BooleanField(default=False)),
                ('objectives_deadline', models.DateField(blank=True, null=True)),
                ('mid_year_employee_comment', models.TextField(blank=True)),
                ('mid_year_employee_submitted', models.DateTimeField(blank=True, null=True)),
                ('mid_year_manager_comment', models.TextField(blank=True)),
                ('mid_year_manager_submitted', models.DateTimeField(blank=True, null=True)),
                ('mid_year_completed', models.BooleanField(default=False)),
                ('end_year_employee_comment', models.TextField(blank=True)),
                ('end_year_employee_submitted', models.DateTimeField(blank=True, null=True)),
                ('end_year_manager_comment', models.TextField(blank=True)),
                ('end_year_manager_submitted', models.DateTimeField(blank=True, null=True)),
                ('end_year_completed', models.BooleanField(default=False)),
                ('final_employee_approved', models.BooleanField(default=False)),
                ('final_employee_approval_date', models.DateTimeField(blank=True, null=True)),
                ('final_manager_approved', models.BooleanField(default=False)),
                ('final_manager_approval_date', models.DateTimeField(blank=True, null=True)),
                ('total_objectives_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('objectives_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('total_competencies_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('competencies_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('overall_weighted_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('final_rating', models.CharField(blank=True, max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_performances', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='api.employee')),
            ],
            options={
                'db_table': 'employee_performances',
                'ordering': ['-performance_year__year', 'employee__employee_id'],
            },
        ),
        migrations.CreateModel(
            name='DevelopmentNeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competency_gap', models.CharField(help_text='Competency name with gap', max_length=200)),
                ('development_activity', models.TextField(help_text='Planned development activity')),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='development_needs', to='api.employeeperformance')),
            ],
            options={
                'db_table': 'employee_development_needs',
                'ordering': ['performance', 'competency_gap'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('weight', models.IntegerField(help_text='Weight percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('calculated_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('cancelled_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('added_mid_year', models.BooleanField(default=False)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('linked_department_objective', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.departmentobjective')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='api.employeeperformance')),
                ('end_year_rating', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='objective_ratings', to='api.evaluationscale')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.objectivestatus')),
            ],
            options={
                'db_table': 'employee_objectives',
                'ordering': ['performance', 'display_order'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to='api.employeeperformance')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'performance_activity_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_type', models.CharField(choices=[('OBJECTIVE_CLARIFICATION', 'Objective Clarification'), ('FINAL_CLARIFICATION', 'Final Performance Clarification'), ('GENERAL_NOTE', 'General Note')], max_length=30)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.performancecomment')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.employeeperformance')),
            ],
            options={
                'db_table': 'performance_comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('goal_setting_employee_start', models.DateField()),
                ('goal_setting_employee_end', models.DateField()),
                ('goal_setting_manager_start', models.DateField()),
                ('goal_setting_manager_end', models.DateField()),
                ('mid_year_review_start', models.DateField()),
                ('mid_year_review_end', models.DateField()),
                ('end_year_review_start', models.DateField()),
                ('end_year_review_end', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'performance_years',
                'ordering': ['-year'],
            },
        ),
        migrations.AddField(
            model_name='employeeperformance',
            name='performance_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.performanceyear'),
        ),
        migrations.AddField(
            model_name='departmentobjective',
            name='performance_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.performanceyear'),
        ),
        migrations.CreateModel(
            name='EmployeeCompetencyRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('competency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.skill')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competency_ratings', to='api.employeeperformance')),
                ('end_year_rating', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='competency_ratings', to='api.evaluationscale')),
            ],
            options={
                'db_table': 'employee_competency_ratings',
                'ordering': ['competency__group', 'competency__name'],
                'unique_together': {('performance', 'competency')},
            },
        ),
        migrations.CreateModel(
            name='PerformanceWeightConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objectives_weight', models.IntegerField(help_text='Objectives weight percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('competencies_weight', models.IntegerField(help_text='Competencies weight percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.positiongroup')),
            ],
            options={
                'db_table': 'performance_weight_configs',
                'unique_together': {('position_group',)},
            },
        ),
        migrations.AlterUniqueTogether(
            name='employeeperformance',
            unique_together={('employee', 'performance_year')},
        ),
    ]
